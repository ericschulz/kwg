#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri Mar 23 20:45:27 2018

@author: hanshalbe
"""


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('kidswithgrids/kwgdata.csv', header=0)

x_rep = []
x_value = []

y = df.z.values

subj_idx = df['id'].values - 1
n_subj = len(set(subj_idx))

x_trial = []

x_round = df['round'].values - np.median(df['round'].values)
x_round /= x_round.max()


for id_ in set(df.id):
    subj_data = df.loc[df.id==id_, :]
    subj_trial = np.array(subj_data.trial.values, dtype=float)
    subj_trial -= subj_trial.mean()
    subj_trial /= subj_trial.std()
    x_trial.append(subj_trial)
    
x_trial = np.concatenate(x_trial)

import pymc3 as pm

with pm.Model() as hier_glm1:
    # Define heirachical parameters
    mu_0 = pm.Normal('mu_beta_0', mu=0., sd=100.)
    mu_1 = pm.Normal('mu_beta_round', mu=0., sd=100.)
    mu_2 = pm.Normal('mu_beta_trial', mu=0., sd=100.)

    sigma_0 = pm.HalfCauchy('sigma_beta_0', beta=100)
    sigma_1 = pm.HalfCauchy('sigma_beta_round', beta=100)
    sigma_2 = pm.HalfCauchy('sigma_beta_trial', beta=100)

    # define subject predictor variables  
    b_0 = pm.Normal('beta_0',     mu=mu_0, sd=sigma_0, shape=n_subj)
    b_1 = pm.Normal('beta_round', mu=mu_1, sd=sigma_1, shape=n_subj)
    b_2 = pm.Normal('beta_trial', mu=mu_2, sd=sigma_2, shape=n_subj)

    # use a linear combination to predict the mean score
    mu_hat = b_0[subj_idx] \
        + b_1[subj_idx] * x_round \
        + b_2[subj_idx] * x_trial
        
    # define the subject standard deviation
    noise_group = pm.HalfCauchy('noise_group', beta=100.)
    subj_stdev = pm.HalfCauchy('subj_stdev', beta=noise_group, shape=n_subj)
    stdev = subj_stdev[subj_idx]
    
    # Data likelihood
    rt_like = pm.Normal('like', mu=mu_hat, sd=stdev, observed=y)
    
    # inference! Use variational inference to estimate the MAP parameters and
    # then use the No U-Turn sample to generate the posterior
    trace1 = pm.sample(2000, init='advi', tune=2000)
    
pm.traceplot(trace1)
out=pm.stats.summary(trace1)
out.to_csv('kidswithgrids/learning.csv')
